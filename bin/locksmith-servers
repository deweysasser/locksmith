#!/bin/bash

# COMMAND HELP:  servers -- manage and manipulate servers, fetch and update keys


help() {
       cat<<EOF
usage: locksmith servers COMMANDK options
EOF
}

# HELP:  add SERVER...
#    add SERVER to the list of managed servers
command_add() {
    cp "$ServersFile" "$ServersFile.bak"
    ( 
	for s in "$@" ; do
	    echo "$s"
	done
	cat "$ServersFile.bak"
    ) | sort -u > "$ServersFile"
}


# HELP:  list 
#    show the servers in the list
command_list() {
    serverList
}

# HELP: fetch
#    fetch the keys from a server or servers.  This implicitly adds
#    the server to the list of managed servers.

command_fetch() {
    sdir=`ensureConfigDir servers`
    if [ $# -lt 1 ] ; then
	servers=`serverList`
    else
	servers="$*"
    fi
    for s in $servers; do
	verbose "fetching from $s"
	dir=`fileEscape $sdir/$s`
	test -d "$dir" ||  mkdir -p "$dir"
	file=`fileEscape $sdir/$s/authorized_keys`
	# Remember the server for furture reference
	command_add "$s"
	ssh "$s" cat .ssh/authorized_keys > $file
	enrollKey "$file"
	command_show "$s"
    done
}

# HELP:  show
#    show the keys on all specified servers
command_show() {
    sdir=`ensureConfigDir servers`
    for s in ${*:-`serverList`}; do
	verbose "$s:"
	file=`fileEscape $sdir/$s/authorized_keys`
	if [ -f $file ] ; then
	    showKeys "$file"
	fi
    done
}

serversThatNeedUpdate() {
    sdir=`ensureConfigDir servers`
    for s in ${*:-`serverList`}; do
	auth=`fileEscape $sdir/$s/authorized_keys`
	add=`fileEscape $sdir/$s/pending-additions.txt`
	if showKeys $auth | grep EXPIRED >/dev/null; then
	    echo $s
	elif [ -f "$add" ] ; then
	    echo $s
	fi
    done
}

# HELP:  status SERVER...
#    show the status of each specified servers (or all servers if none
#    are specified).  This lists expired and added keys for each
#    server.
command_status() {
    sdir=`ensureConfigDir servers`
    for s in ${*:-`serverList`}; do
	echo "$s:"
	auth=`fileEscape $sdir/$s/authorized_keys`
	add=`fileEscape $sdir/$s/pending-additions.txt`
	showKeys $auth | grep EXPIRED 

	if [ -f "$add" ] ; then
	    echo "keys to add:"
	    showKeys $add 
	fi
	
    done
}

# HELP:  update SERVER
#    update the given servers or all servers that need update if none
#    are given.

command_update() {
    sdir=`ensureConfigDir servers`
    for s in ${*:-`serversThatNeedUpdate`}; do
	verbose "$s:"
	command_fetch $s
	auth=`fileEscape $sdir/$s/authorized_keys`
	newauth=`fileEscape $sdir/$s/authorized_keys.new`
	add=`fileEscape $sdir/$s/pending-additions.txt`

	expired=`getExpiredKeysRegexp`

	expiredCount=`showKeys "$auth" | grep EXPIRED | wc -l`
	addCount=0
	test -f "$add" && addCount=`cat "$add" | wc -l`

	if [ $expiredCount -gt 0 ] ; then
	    echo "Removing $expiredCount keys"
	fi
	if [ $addCount -gt 0 ] ; then
	    echo "Adding $addCount keys"
	fi


	(
	    cat "$auth"
	    test -f "$add" && cat "$add"
	) | perl -n -e "print unless /$expired/" > $newauth

	scp -q $newauth $s:.ssh/authorized_keys && (mv -f $newauth $auth; rm -f $add; echo "$s updated") || echo "$s update failed"

	echo "New keys are:"
	if [ -f $file ] ; then
	    showKeys "$auth"
	fi
    done
}

# HELP:  add-key KEY SERVER...
#     add the KEY to the specified SERVER or all servers if none are
#     specified.  Key can be a known key (something shown by
#     'locksmith keys') or a file in OpenSSH public key format, in
#     which case the key will be enrolled before being added to the
#     given servers.

command_add-key() {
    if [ $# -lt 1 ] ; then
	echo "You must specifiy a key to add"
	exit 1
    fi

    if [ -f "$1" ] ; then
	enrollKey "$1"
	key=`cat $1`
    else
	key=`findKey "$1"`
    fi

    shift

    sdir=`ensureConfigDir servers`
    for s in ${*:-`serverList`}; do
	verbose "Adding to $s:"
	file=`fileEscape $sdir/$s/pending-additions.txt`
	echo "$key" >> $file
	resortKeyfile $file
	if [ -f $file ] ; then
	    showKeys "$file"
	fi
    done
}

# HELP:  remove SERVER
#    remove the server from the list of managed servers.  Note that
#    this does NOT forget about the keys -- those are still enrolled.

command_remove() {
    for s in "$@"; do
	sdir=`ensureConfigDir servers`
	serverdir=`fileEscape $sdir/$s`
	if [ -d "$serverdir" ] ; then
	    echo "Removing $s"
	    rm -rf "$serverdir"
	fi
	cp "$ServersFile" "$ServersFile.bak"
	grep -v $s "$ServersFile.bak" > "$ServersFile"
    done
}


source `dirname $0`/locksmith-common

mainloop servers list "$@" 


   