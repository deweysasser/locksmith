#!/bin/bash
# Purpose:  common functions for locksmith programs.  Not exectuable itself.


getConfigDir() {
    echo $HOME/.locksmith
}

ensureConfigDir() {
    path="$1"
    dir=`getConfigDir`
    test -d "$dir/$path" || mkdir -p "$dir/$path"
    echo "$dir/$path"
}

fileEscape() {
    echo "$@" | tr '@' '_'
}



verbose() {
    echo "$@"
}

mainloop() {
    maincommand="$1" ; shift
    defaultCommand="$1"; shift

if [ "$#" -lt 1 ] ; then
    command=$defaultCommand
else
    command=$1
    shift
fi

if type command_$command >/dev/null 2>&1; then
    command_$command "$@"
else
    locksmith help $maincommand
fi
    
}

serverList() {
    if [ ! -f "$ServersFile" ] ; then
	return 0
    fi

    if [ -n "$*" ] ; then
	grep "$@" "$ServersFile" > $tmp/listing.txt
	if [ -s $tmp/listing.txt ] ; then
	    cat $tmp/listing.txt
	else
	    echo "$@" | tr ' ' '\n'
	fi
    else
	cat "$ServersFile"
    fi
}

######################################################################
# Key specific functions
######################################################################

enrollKey() {
    if [ -f "$1" ] ; then
	cat "$@" | while read LINE; do
	    enrollKey $LINE
	done
	return;
    fi

    date=`date +%Y%m%d%H%M%S`
#    type="$1"; shift
#    key="$1"; shift

    file=`ensureConfigDir`/keys.txt

    test -f "$file" || touch "$file"

    cp "$file" "$file.bak"
    (
	echo $date "$@"
	cat "$file.bak"
    ) | keysort > "$file"
}

keysort() {
    sort -k 1,3  "$@" | sort -k 2,3 -u
}

resortKeyfile() {
    file="$1" 

    cp "$file" "$file.bak"
    keysort "$file.bak" > "$file"
}

getExpiredKeysRegexp() {
    if [ ! -f "$ExpiredKeysFile" ] ; then
	echo "__no-expired-keys__"
	return
    fi

    perl -n -e '@k=split(/\s+/); push(@keys, quotemeta $k[2]); END { print "(" . join("|", @keys) . ")" }' "$ExpiredKeysFile"
}

getRemoveKeysRegexp() {
    file="$1"

    if [ ! -f "$file" ] ; then
	echo "__no-removed-keys__"
	return
    fi

    perl -n -e '@k=split(/\s+/); push(@keys, quotemeta $k[1]); END { print "(" . join("|", @keys) . ")" }' "$file"
}

hasExpiredKeys() {
#    expired=`getExpiredKeysRegexp`
#    perl -n -e "exit 0 if /$expired/; END {exit 1}" "$@"
    showKeys "$@" | grep EXPIRED > /dev/null
}


findKey() {
    grep "$1" "$KeysFile" | perl -n -e '@k=split; shift @k; print join(" ", @k) . "\n";'
}

showKeys() {
    expired=`getExpiredKeysRegexp`
    (
	if [ -f "$1" ] ; then
	    file="$1"; shift
	    if [ $# -gt 0 ] ; then
		grep "$@" "$file"
	    elif [ -f "$file" ] ; then
		cat "$file"
	    fi
	else 
	    echo "$@"
	fi
    ) | keysort | perl -n -e "BEGIN: {\$re= '$expired'}"  \
	-e 'print "EXPIRED! " if /$re/ ;' \
	-e 'print "($2) $3 ...$4 $5" if /^((\d+) )?ssh-(\w+) [^\s]+([^\s]{12}) (.*)/;'  \
	-e 'print "\n";'
    
}


keyExists() {
    server="$1"
    key="$2"

    auth=`fileEscape $sdir/$s/authorized_keys`

    if [ ! -r "$auth" ] ; then
	return 1
    fi

    grep -q  "$key" "$auth"
}


# Variables

ServersFile=`ensureConfigDir`/servers.txt
KeysFile=`ensureConfigDir`/keys.txt
ExpiredKeysFile=`ensureConfigDir`/expired.txt
test -f "$ServersFile" || touch "$ServersFile"
tmp=${TMPDIR:-/tmp}/locksmith.$$
mkdir -p $tmp
trap 'rm -rf $tmp' 0

